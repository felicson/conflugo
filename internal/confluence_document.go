package internal

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	confluence "github.com/kentaro-m/blackfriday-confluence"
	"github.com/russross/blackfriday/v2"
)

type ConfluenceDocument struct {
	Body        string
	Attachments []string
	Prefix      string
}

// todo: do suffix configurable
const docDirectory = "doc"

func WikiByPath(path string) (*ConfluenceDocument, error) {

	var (
		attachments []string
		prefix      string
	)
	header := []byte("> **Notice. Page generated by conflugo do not edit!**  \n\n")
	input, err := os.ReadFile(path)
	if err != nil {
		return nil, fmt.Errorf("on read file %q: %v", path, err)
	}
	header = append(header, input...)

	if strings.HasSuffix(filepath.Dir(path), docDirectory) {
		prefix = docDirectory + "/"
	}
	renderer := &confluence.Renderer{}
	extensions := blackfriday.CommonExtensions

	md := blackfriday.New(blackfriday.WithRenderer(renderer), blackfriday.WithExtensions(extensions))

	ast := md.Parse(header)
	ast.Walk(func(node *blackfriday.Node, entering bool) blackfriday.WalkStatus {
		if node.Type == blackfriday.Image && entering {
			link := string(node.LinkData.Destination)
			if !strings.HasPrefix(link, "http") {
				attachments = append(attachments, link)
				node.LinkData.Destination = []byte(filepath.Base(link))
			}
		}
		return blackfriday.GoToNext
	})
	html := renderer.Render(ast)
	return &ConfluenceDocument{Body: string(html), Attachments: attachments, Prefix: prefix}, nil
}
